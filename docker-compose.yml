# Up:
#   docker compose up --build
# Interact with Hardhat:
#   docker compose exec hardhat npx hardhat interact --network localhost
# Interact with database:
#   docker compose exec database psql

services:
  # Hardhat.
  hardhat:
    build:
      context: .
      target: hardhat
    healthcheck:
      # Check that the port is open and the contracts were deployed
      test: |
        set -e
        stat contracts.stamp
        netstat -ltn | grep -c 8545
      start_period: 30s
      start_interval: 1s
    ports:
      - "8545:8545"
  # Combined postgres for backend and batcher. Just mix them all up for now.
  # If this is a problem we can create a 2nd db+user or a 2nd entire process.
  database:
    image: postgres:16
    environment:
      PGUSER: postgres  # for psql
      POSTGRES_PASSWORD: postgres
    volumes:
      # Don't mount the database as a volume, just let it die, because we have
      # to rebuild it any time hardhat restarts from block #0 anyways.
      - "./node_modules/@paima/db/migrations/up.sql:/docker-entrypoint-initdb.d/00-paima-init.sql"
      - "./db/migrations/init.sql:/docker-entrypoint-initdb.d/01-game-init.sql"
      - "./db/migrations/batcher.sql:/docker-entrypoint-initdb.d/99-paima-batcher-up.sql"
    healthcheck:
      # Use pg_isready to check postgres is running.
      test: pg_isready -U postgres -p 5432
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
      start_interval: 1s
    ports:
      - "54321:5432"
  batcher:
    image: ghcr.io/paimastudios/paima-batcher:latest
    depends_on:
      hardhat:
        condition: service_healthy
      #backend:
      #  condition: service_healthy
      database:
        condition: service_healthy
    env_file:
      - .env.localhost
    # Host network lets development and docker share port configs.
    network_mode: host
    healthcheck:
      # Check that the port is open.
      test: netstat -ltn | grep -c 3340
      start_period: 30s
      start_interval: 1s
  # The backend itself.
  # backend:
  #   build:
  #     context: .
  #     target: backend
  #   env_file:
  #     - ./.env.${NODE_ENV:-localhost}
  #   environment:
  #     DB_HOST: database
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
