-- paima general
CREATE TABLE block_heights ( 
  block_height INTEGER PRIMARY KEY,
  seed TEXT NOT NULL,
  done BOOLEAN NOT NULL DEFAULT false
);
CREATE TABLE scheduled_data (
  id SERIAL PRIMARY KEY,
  block_height INTEGER NOT NULL,
  input_data TEXT NOT NULL
);
CREATE TABLE nonces (
  nonce TEXT PRIMARY KEY,
  block_height INTEGER NOT NULL
);
CREATE TABLE rounds(
  id SERIAL PRIMARY KEY,
  lobby_id TEXT NOT NULL references lobbies(lobby_id),
  round_within_match INTEGER NOT NULL,
  starting_block_height INTEGER NOT NULL references block_heights(block_height),
  execution_block_Height INTEGER references block_heights(block_height)
);
CREATE TABLE global_user_state (
  wallet TEXT NOT NULL PRIMARY KEY,
  wins INTEGER NOT NULL DEFAULT 0,
  losses INTEGER NOT NULL DEFAULT 0,
  ties INTEGER NOT NULL DEFAULT 0
);
--  tower defense specific 
CREATE TABLE maps (
  name TEXT PRIMARY KEY,
  layout TEXT NOT NULL
);

CREATE TABLE configs(
  id TEXT PRIMARY KEY,
  content TEXT NOT NULL
);

CREATE TYPE lobby_status AS ENUM ('open', 'active', 'finished', 'closed');
-- match state before a round is the gold in each side, and health/upgrade status of every structure.
-- not practical to keep the state of every single tower of every single game in its own table, so we'll keep it as a json blob in the lobbies table and renew every round
-- TODO or we can keep it in the rounds table? might help with game replays
CREATE TABLE lobbies(
  lobby_id TEXT PRIMARY KEY,
  lobby_creator TEXT NOT NULL,
  player_two TEXT,
  created_at TIMESTAMP NOT NULL,
  creation_block_height INTEGER NOT NULL,
  hidden BOOLEAN NOT NULL DEFAULT false,
  practice BOOLEAN NOT NULL DEFAULT false,
  config TEXT references configs(id),
  map TEXT NOT NULL references map(name),
  num_of_rounds INTEGER NOT NULL,
  round_length INTEGER NOT NULL,
  current_round INTEGER NOT NULL DEFAULT 0,
  match_state JSONB NOT NULL
);
CREATE TYPE move_type AS ENUM("build", "upgrade", "repair", "destroy");
-- move targets are usually structure ids, or map coordinates in the case of build.
-- we encode them as text and parse it later. Coordinates will be "x,y"
CREATE TABLE match_moves(
  id SERIAL PRIMARY KEY,
  lobby_id TEXT NOT NULL references lobbies(lobby_id),
  wallet TEXT NOT NULL,
  round INTEGER NOT NULL,
  move_type move_type NOT NULL,
  move_target TEXT NOT NULL
);
CREATE TYPE match_result AS ENUM ('win', 'tie', 'loss');
CREATE TABLE final_match_state (
   lobby_id TEXT NOT NULL references lobbies(lobby_id),
   player_one_wallet TEXT NOT NULL,
   player_one_result match_result NOT NULL,
   player_two_wallet TEXT NOT NULL,
   player_two_result match_result NOT NULL,
   UNIQUE (lobby_id)
);

INSERT INTO maps(name, layout)
VALUES
('jungle', '1111111111111222222222r\n1333133313331244424442\r\n1313131313131242424242\r\n1313331333133442444242\r\n1311111111111222222242\r\n1311111333111244422242\r\n3333311313331242424444\r\n1311313311131242444242\r\n1311333111133442222242\r\n1311111133311222444242\r\n1313333131311244424242\r\n1333113331333442224442\r\n1111111111111222222222'),
('backwards', '1111111111111222222222\r\n1333331133331244444442\r\n1311131131131242222242\r\n1311133331131244442242\r\n1311111111131222242242\r\n1311133331133444442242\r\n3333131131111222222244\r\n1313131133333224444442\r\n1313331111113444222242\r\n1311111333311222244442\r\n1311111311311222242222\r\n1333333311333444442222\r\n1111111111111222222222'),
('crossing', '1111111111111222222222\r\n1111133333111224444222\r\n1333331113111224224442\r\n1311111113133444222242\r\n1313333113131222222242\r\n1313113113331222222242\r\n3333113113131222244444\r\n1311113333133442242242\r\n1311111111111244442242\r\n1313333311111222222442\r\n1313111311333444222422\r\n1333111333311224444422\r\n1111111111111222222222',
('narrow', '1111111111111222222222\r\n1111111333111244422222\r\n1113331313111242424442\r\n1113133313133442424242\r\n1333111113331222444242\r\n1311111111111222222242\r\n3333333333333444444444\r\n1311111111111222222242\r\n1311133313331224442242\r\n1333131313131224242242\r\n1113131333131244242242\r\n1113331111133442244442\r\n1111111111111222222222',
('snake', '1111111111111222222222\r\n1111133333114444422222\r\n1111131113114222422222\r\n1111131113114222422222\r\n1111131113114222422222\r\n3311131113124222422244\r\n1311131113124222422242\r\n1311131113124222422242\r\n1311131113124222422242\r\n1311131113344222422242\r\n1311131111222222422242\r\n1333331112222222444442\r\n1111111122222222222222'),
('straight', '1111111111111222222222\r\n1133311111133442244422\r\n1131311333131242242442\r\n1331313313131244242242\r\n1311333113331224442242\r\n1311111111111222222242\r\n3333333333333444444444\r\n1311111111111222222242\r\n1311333113331224442242\r\n1331313313131244242242\r\n1131311333131242242442\r\n1133311111133442244422\r\n1111111111111222222222'),
('wavy', '1111111111111222222222\r\n1113331113331224442222\r\n1333133313131224244442\r\n1311111333133444222242\r\n1333111111111222222242\r\n1313111333111222444242\r\n3313133313133442424444\r\n1313131113131242422242\r\n1313331113331242424442\r\n1311111111111244424222\r\n1331133331333222224222\r\n1133331133313444444222\r\n1111111111111222222222'),
('fork', '1111111111111222222222\r\n1333333333333444444442\r\n1311111111111222222242\r\n1333333333333444444442\r\n1131111111111222222422\r\n1333333333333444444442\r\n3311111111111222222244\r\n1333333333333444444442\r\n1131111111111222222422\r\n1333333333333444444442\r\n1311111111111222222242\r\n1333333333333444444442\r\n1111111111111222222222'),
('islands', '1111111111111222222222\r\n1333331221333344444442\r\n1311132222311112222242\r\n1311142222411334444442\r\n1311142222411312222222\r\n3311244444421333444442\r\n1111222222221111222244\r\n3311244444421333444442\r\n1311142222411312222222\r\n1311142222411334444442\r\n1311132222311112222242\r\n1333331221333344444442\r\n1111111111111222222222'),


-- paima general too

CREATE FUNCTION update_lobby_round() RETURNS TRIGGER AS $$
BEGIN
  UPDATE lobbies 
  SET 
  current_round = NEW.round_within_match
  WHERE lobbies.lobby_id = NEW.lobby_id;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_current_round
AFTER INSERT ON rounds
FOR EACH ROW 
EXECUTE FUNCTION update_lobby_round();
